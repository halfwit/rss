#!/bin/sh
## Dmenu based frontend to read RSS directory

RSS=$XDG_DATA_HOME/rss

# File for unread count, adjust to suit your setup
UNREADCOUNT="$XDG_RUNTIME_DIR"/statusbar/rss
trap 'update_count' EXIT

# List all feeds
list_all() {
	cd "$RSS" && ls
	printf '%s\n%s\n' "Back" "Exit"
}	

# List all feeds. Some titles can be expressed as a directory (since `/` is not a valid character in filenames, we allow `$RSS/read/myfeed/something neat for my title with a / in it`.)
list_sub() {
	find "$RSS/$@" -type f | xe stat -q -f '%m %N' | sort -r | xe basename
	printf '%s\n%s\n%s\n' "Back" "Clear $@" "Exit"
}

# Helper function to do a nested search on sh
list_new() {
	find "$RSS"/*/unread -type f | sed 's|.*rss/||;s|/.*||'
}

# List all feeds with unread content
list_main() {
	list_new | sed 's|/unread||' | sort -u
	printf '%s\n%s\n' "View All" "Exit"
}

# This, you can simply change to a single printf
# If you prefer an unread count of 0 in your file
# `list_new | wc -l > "$UNREADCOUNT"`
update_count() {
	unread="$(list_new | wc -l)"
	case "$unread" in
		0)	echo -n > "$UNREADCOUNT" 						;;
		*)  printf '%s \n' "$unread" > "$UNREADCOUNT" ;; 
	esac
}

# Move from unread to read
scrub() {
	# unread to read
	new="$(printf '%s\n' "$@" | sed 's/unread/read/')"
	# Ensure we have a `read` directory
	mkdir -p "$(dirname "$new")"
	# Test that we are passed in an `unread` dir, properly
	if printf '%s\n' "$@" | grep -q unread; then
		mv "$@" "$new"
	fi
}

plumb() {
	plumber < "$@" >/dev/null &
	scrub "$@"
}

# Read all selections and plumb any good result
handle() {
	# Build command to call rss
	case "$@" in
		# Remove all entries in unread
		Clear*)	for i in "$RSS/${@#*Clear }"/unread/*; do { scrub "$i"; }; done
			  exec $0 main	;;
		View*)	  exec $0 all	;;
		Back)	  exec $0 main	;;
		Exit) 	  exit 0	;;
		*)        if test -d "$RSS/$@"; then
				exec $0 "$@"
			  else
				plumb "$RSS/$CHAN/"*"/$@"      
			  fi ;;
	esac
}

# If we're passed in a channel, save it for later
CHAN="$@"

# If we have no arguments, run our main list
test -z "$1" && set -- main

# Set pipeline to run based on command-line arguments
case "$@" in
	main) run() { list_main     | dmenu -p "Select feed: "; } ;;
	all)  run() { list_all      | dmenu -p "Select feed: "; } ;;
	*)    run() { list_sub "$@" | dmenu -p "Select post: "; } ;;
esac

# Ugly inline-while loop, but hey.
run "$@" | while read -r input; do { handle "$input"; }; done
